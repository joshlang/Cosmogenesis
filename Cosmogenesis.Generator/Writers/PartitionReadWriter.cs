using System.Linq;
using Microsoft.CodeAnalysis;

namespace Cosmogenesis.Generator.Writers
{
    class PartitionReadWriter
    {
        public static void Write(GeneratorExecutionContext context, DbPartitionModel partitionModel)
        {
            var s = $@"
using System;
using System.Threading.Tasks;
using Microsoft.Azure.Cosmos;
using Cosmogenesis.Core;

namespace {partitionModel.DbModel.Namespace}
{{
    public class {partitionModel.ReadClassName}
    {{
        protected virtual {partitionModel.DbModel.DbClassName} {partitionModel.DbModel.DbClassName} {{ get; }} = default!;
        protected virtual PartitionKey PartitionKey {{ get; }} = default!;

        /// <summary>Mocking constructor</summary>
        protected {partitionModel.ReadClassName}() {{ }}

        protected internal {partitionModel.ReadClassName}(
            {partitionModel.DbModel.DbClassName} {partitionModel.DbModel.DbClassName.Parameterify()},
            PartitionKey partitionKey)
        {{
            this.{partitionModel.DbModel.DbClassName} = {partitionModel.DbModel.DbClassName.Parameterify()} ?? throw new ArgumentNullException(nameof({partitionModel.DbModel.DbClassName.Parameterify()}));
            this.PartitionKey = partitionKey;
        }}

{string.Concat(partitionModel.Documents.Values.Select(Read))}
    }}
}}
";

            context.AddSource($"partition_{partitionModel.ReadClassName}.cs", s);
        }

        static string Read(DbDocumentModel documentModel) => $@"
        /// <summary>
        /// Try to load a {documentModel.ClassName} by id.
        /// Returns the {documentModel.ClassName} or null if not found.
        /// </summary>
        /// <exception cref=""DbOverloadedException"" />
        /// <exception cref=""DbUnknownStatusCodeException"" />
        protected virtual Task<{documentModel.ClassFullName}?> {documentModel.ClassName}ByIdAsync(string id) => 
            {documentModel.DbPartitionModel.DbModel.DbClassName}.ReadByIdAsync<{documentModel.ClassFullName}>(
                partitionKey: PartitionKey, 
                id: id, 
                type: {documentModel.ConstDocType});

        /// <summary>
        /// Try to load a {documentModel.ClassName} using an id generated by the parameters.
        /// Returns the {documentModel.ClassName} or null if not found.
        /// </summary>
        /// <exception cref=""DbOverloadedException"" />
        /// <exception cref=""DbUnknownStatusCodeException"" />
        public virtual Task<{documentModel.ClassFullName}?> {documentModel.ClassName}Async({documentModel.GetIdModel.InputParameters}) => 
            {documentModel.DbPartitionModel.DbModel.DbClassName}.ReadByIdAsync<{documentModel.ClassFullName}>(
                partitionKey: PartitionKey, 
                id: DbDocHelper.GetValidId({documentModel.GetIdModel.FullMethodName}({documentModel.GetIdModel.InputParameterMapping})), 
                type: {documentModel.ConstDocType});
";
    }
}
