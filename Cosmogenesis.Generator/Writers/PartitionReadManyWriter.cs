using System.Linq;
using Microsoft.CodeAnalysis;

namespace Cosmogenesis.Generator.Writers
{
    class PartitionReadManyWriter
    {
        public static void Write(GeneratorExecutionContext context, DbPartitionModel partitionModel)
        {
            if (!partitionModel.Documents.Values.Any(x => x.GetIdModel.HasParameters))
            {
                return;
            }

            var s = $@"
using System;
using Microsoft.Azure.Cosmos;
using System.Linq;
using Cosmogenesis.Core;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace {partitionModel.DbModel.Namespace}
{{
    public class {partitionModel.ReadManyClassName}
    {{
        protected virtual {partitionModel.DbModel.DbClassName} {partitionModel.DbModel.DbClassName} {{ get; }} = default!;
        protected virtual PartitionKey PartitionKey {{ get; }} = default!;

        /// <summary>Mocking constructor</summary>
        protected {partitionModel.ReadManyClassName}() {{ }}

        protected internal {partitionModel.ReadManyClassName}(
            {partitionModel.DbModel.DbClassName} {partitionModel.DbModel.DbClassName.Parameterify()},
            PartitionKey partitionKey)
        {{
            this.{partitionModel.DbModel.DbClassName} = {partitionModel.DbModel.DbClassName.Parameterify()} ?? throw new ArgumentNullException(nameof({partitionModel.DbModel.DbClassName.Parameterify()}));
            this.PartitionKey = partitionKey;
        }}

{string.Concat(partitionModel.Documents.Values.Select(ReadById))}
{string.Concat(partitionModel.Documents.Values.Select(Read))}
    }}
}}
";
            context.AddSource($"partition_{partitionModel.ReadManyClassName}.cs", s);
        }

        static string ReadById(DbDocumentModel documentModel) =>
            !documentModel.GetIdModel.HasParameters
            ? ""
            : $@"
        /// <summary>
        /// Try to load {documentModel.ClassName} documents by id.
        /// id should be transformed using DbDocHelper.GetValidId.
        /// Returns an array of {documentModel.ClassName} documents (or null if not found) in the same order as the ids were provided.
        /// </summary>
        /// <exception cref=""DbOverloadedException"" />
        /// <exception cref=""DbUnknownStatusCodeException"" />
        protected virtual Task<{documentModel.ClassFullName}?[]> {documentModel.ClassName.Pluralize()}ByIdAsync(IEnumerable<string> ids) => 
            {documentModel.DbPartitionModel.DbModel.DbClassName}.ReadByIdsAsync<{documentModel.ClassFullName}>(
                partitionKey: PartitionKey, 
                ids: ids, 
                type: {documentModel.ConstDocType});
";

        static string Read(DbDocumentModel documentModel)
        {
            if (!documentModel.GetIdModel.HasParameters)
            {
                return "";
            }

            var singleType = documentModel.GetIdModel.MethodSymbol.Parameters[0].Type.FullTypeName();
            var singleTypeParam = documentModel.GetIdModel.MethodSymbol.Parameters[0].Name.Pluralize();

            var inputParams =
                documentModel.GetIdModel.MethodSymbol.Parameters.Length == 1
                ? $"IEnumerable<{singleType}> {singleTypeParam}"
                : $"IEnumerable<({documentModel.GetIdModel.InputParametersForTuple})> ids";
            var toId =
                documentModel.GetIdModel.MethodSymbol.Parameters.Length == 1
                ? $"{singleTypeParam}.Select({documentModel.GetIdModel.FullMethodName}).Select(DbDocHelper.GetValidId)"
                : $"ids.Select(x => {documentModel.GetIdModel.FullMethodName}({documentModel.GetIdModel.DocumentToParametersMapping("x")})).Select(DbDocHelper.GetValidId)";
            return $@"
        /// <summary>
        /// Try to load {documentModel.ClassName} documents using ids generated by the parameters.
        /// Returns an array of {documentModel.ClassName} documents (or null if not found) in the same order as the ids were provided.
        /// </summary>
        /// <exception cref=""DbOverloadedException"" />
        /// <exception cref=""DbUnknownStatusCodeException"" />
        public virtual Task<{documentModel.ClassFullName}?[]> {documentModel.ClassName.Pluralize()}Async({inputParams}) => 
            {documentModel.DbPartitionModel.DbModel.DbClassName}.ReadByIdsAsync<{documentModel.ClassFullName}>(
                partitionKey: PartitionKey, 
                ids: {toId}, 
                type: {documentModel.ConstDocType});
";
        }
    }
}
