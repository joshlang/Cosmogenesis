using Cosmogenesis.Generator.Models;
using Cosmogenesis.Generator.Plans;

namespace Cosmogenesis.Generator.Writers.Partition;
static class ReadWriter
{
    public static void Write(OutputModel outputModel, DatabasePlan databasePlan, PartitionPlan partitionPlan)
    {
        var s = $@"
namespace {databasePlan.Namespace};

public class {partitionPlan.ReadClassName}
{{
    protected virtual {databasePlan.Namespace}.{databasePlan.DbClassName} {databasePlan.DbClassName} {{ get; }} = default!;
    protected virtual Microsoft.Azure.Cosmos.PartitionKey PartitionKey {{ get; }} = default!;

    /// <summary>Mocking constructor</summary>
    protected {partitionPlan.ReadClassName}() {{ }}

    internal protected {partitionPlan.ReadClassName}(
        {databasePlan.Namespace}.{databasePlan.DbClassName} {databasePlan.DbClassNameArgument},
        Microsoft.Azure.Cosmos.PartitionKey partitionKey)
    {{
        this.{databasePlan.DbClassName} = {databasePlan.DbClassNameArgument} ?? throw new System.ArgumentNullException(nameof({databasePlan.DbClassNameArgument}));
        this.PartitionKey = partitionKey;
    }}

{string.Concat(partitionPlan.Documents.Select(x => Read(databasePlan, x)))}
{Unions(databasePlan, partitionPlan)}
}}
";

        if (partitionPlan.Unions.Count > 0)
        {
            ReadUnionsWriter.Write(outputModel, databasePlan, partitionPlan);
        }

        outputModel.Context.AddSource($"partition_{partitionPlan.ReadClassName}.cs", s);
    }

    static string Unions(DatabasePlan databasePlan, PartitionPlan partitionPlan) =>
        partitionPlan.Unions.Count == 0 ? "" : $@"
    {databasePlan.Namespace}.{partitionPlan.ReadUnionsClassName}? unions;
    public virtual {databasePlan.Namespace}.{partitionPlan.ReadUnionsClassName} Unions => this.unions ??= new(
        {databasePlan.DbClassNameArgument}: this.{databasePlan.DbClassName},
        partitionKey: this.PartitionKey);
";

    static string Read(DatabasePlan databasePlan, DocumentPlan documentPlan) => $@"
    /// <summary>
    /// Try to load a {documentPlan.ClassName} by id.
    /// Returns the {documentPlan.ClassName} or null if not found.
    /// </summary>
    /// <exception cref=""Cosmogenesis.Core.DbOverloadedException"" />
    /// <exception cref=""Cosmogenesis.Core.DbUnknownStatusCodeException"" />
    protected virtual System.Threading.Tasks.Task<{documentPlan.FullTypeName}?> {documentPlan.ClassName}ByIdAsync(string id) => 
        this.{databasePlan.DbClassName}.ReadByIdAsync<{documentPlan.FullTypeName}>(
            partitionKey: this.PartitionKey, 
            id: id, 
            type: {documentPlan.ConstDocType});

    /// <summary>
    /// Try to load a {documentPlan.ClassName} using an id generated by the parameters.
    /// Returns the {documentPlan.ClassName} or null if not found.
    /// </summary>
    /// <exception cref=""Cosmogenesis.Core.DbOverloadedException"" />
    /// <exception cref=""Cosmogenesis.Core.DbUnknownStatusCodeException"" />
    public virtual System.Threading.Tasks.Task<{documentPlan.FullTypeName}?> {documentPlan.ClassName}Async({documentPlan.GetIdPlan.AsInputParameters()}) => 
        this.{databasePlan.DbClassName}.ReadByIdAsync<{documentPlan.FullTypeName}>(
            partitionKey: this.PartitionKey, 
            id: Cosmogenesis.Core.DbDocHelper.GetValidId({documentPlan.GetIdPlan.FullMethodName}({documentPlan.GetIdPlan.AsInputParameterMapping()})), 
            type: {documentPlan.ConstDocType});
";
}
